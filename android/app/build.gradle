plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"  // Add the Google services Gradle plugin
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Load keystore properties
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.ononcompany.allsuri"
    compileSdk 35
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.ononcompany.allsuri"
        minSdkVersion 23
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true  // Add this line to support multidex
        manifestPlaceholders = [
            'kakaoCustomSchemePrefix': 'kakao'
        ]
    }

    signingConfigs {
        release {
            // Try to load from key.properties file first
            if (keystoreProperties['keyAlias']) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
            // Fall back to environment variables if key.properties is not available
            else {
                def ksFile = System.getenv("KEYSTORE_FILE")
                def ksPass = System.getenv("KEYSTORE_PASSWORD")
                def keyAliasEnv = System.getenv("KEY_ALIAS")
                def keyPass = System.getenv("KEY_PASSWORD")
                if (ksFile && ksPass && keyAliasEnv && keyPass) {
                    storeFile file(ksFile)
                    storePassword ksPass
                    keyAlias keyAliasEnv
                    keyPassword keyPass
                }
            }
        }
    }

    buildTypes {
        release {
            // Use release signing config if key.properties or env vars are available
            signingConfig keystoreProperties['keyAlias'] ? signingConfigs.release : 
                          (System.getenv("KEYSTORE_FILE") ? signingConfigs.release : signingConfigs.debug)
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // Keep default debug config
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
    implementation platform('com.google.firebase:firebase-bom:32.3.1')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-storage'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.android.gms:play-services-auth:20.7.0'
}
